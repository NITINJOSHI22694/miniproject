#include<stdio.h>
#include<stdlib.h>
#include<math.h>
char la[5],label[10],code[10],plus[5],operand[10];
int format=0,opcode=0,error=0,n[1],in[1],x[1];
long int mem=4096;
int extract (char a[])
{
int i,j,k,l,sstring=0,var1,var2,var3=0,var4=0,var5,count=0;
FILE *q;
char temp[10],label[10];
error=0;
format=0;
la[0]='\0';
label[0]='\0';
code[0]='\0';
n[0]=0;
x[0]=0;
in[0]=0;
plus[0]='\0';
operand[0]='\0';
i=strlen(a),
j=0;
sstring=0;
if(i==0)
{

    return 0;
}
while(j<=i&&i!=0)
{
    while(j<=i)
    {
        if(a[j]!=' ')
        {
            sstring++;
            k=j;
            while(j<=i)
            {

                if(j==i)
                    {

                        l=j+1;
                        j++;
                        break;
                    }
                if(a[j]==' ')
                {

                    l=j;

                    break;
                }
                else{
                    j++;
                }

            }
            j++;
            break;
        }
        else
        {
            j++;
        }
    }
    printf("\n");
    var1=0;
    for(;k<l;k++)
    {

        temp[var1]=a[k];
        var1++;
    }
    temp[var1]='\0';

    strlwr(temp);
    if(sstring==1&&!strcmp(temp,"end"))
    {
        error= 1;
        return(-1);
    }
    if(sstring==1&&!strcmp(temp,"l"))
    {

        strcpy(la,temp);
        var3=1;

    }
    if(var3==1&&sstring==2)
    {


        strcpy(label,temp);
        var2=llabel(label,mem);
        if(var2==13)
        {
            error =1;
            return 13;
        }
    }
    if((var4==0 && sstring==3)||(var3!=1 && sstring==1))
    {
    strcpy(code,temp);
        var4=1;

        var5=ccode(temp);
        if(var5==14)

            {
               error=1;
                return(14);
            }
        else{
            while(l<=i&&format==1)
            {

                if(a[l]!=' ')
                {
                    error=1;
                    return 100;
                }
                l++;
            }
            while(l<i&&format==2)
            {

                if(a[l]!=' ')
                {
                    if(a[l]=='a'||a[l]=='b'||a[l]=='c'||a[l]=='d'||a[l]=='e'||a[l]=='g'||a[l]=='A'||a[l]=='B'||a[l]=='C'||a[l]=='D'||a[l]=='E'||a[l]=='G')
                    {
                        count ++;
                        l++;
                    }


                    else
                    {
                        error=1;
                    return 103;
                    }


                }
                else
                {
                    l++;
                }


            }
            if(format==2)
            {

                if(count <=1)
                {
                    error=1;
                    return 101;
                }
                if(count>2)
                {

                    error=1;
                    return 102;
                }
            }
            if(format ==3&&l>i)
            {
                return 104;
            }
            else
            {

                extract2(a,l);
                break;
            }
        }

    }

}

return (sstring);
}
int llabel(char label[],int addr)
{
    char t[10];
    int i=0,j=0;
    FILE *p;
    p=fopen("label.txt","r");
    while(!feof(p))
    {

    fscanf(p,"%s",&t);
    i=strcmp(t,label);
    if(i==0)
    return(13);

    }
    fclose(p);

        p=fopen("label.txt","a");
        fprintf(p,"\n%s",label);
        fprintf(p," %x",addr);
        fclose(p);


}
int main()
{

    int i,j,k,n1,n2,n3,n4,svar=1;
    FILE *p,*q,*r,*reg;
    char a[10],temp[10],fname[10]="file",varc1,varc2,varc3,varc4;
    //printf("memory ");//gine optio whether to choose or not
    //scanf("%ld",&mem);
    while(1)
{


        printf("%x ",mem);
    gets(a);
    if(strlen(a)==1&&a[0]=='b')
    {

        break;
    }
    j=extract(a);
    if(j==-1)
    {
     printf("halt");
     return;
    }
    if(j==13)
    {
        printf("Error label name already in use \n");
    }
    if(j==14)
    {

        printf("\nwrong operation code\n");
    }
    if(j==100)
    {

        printf("to many operand for format 1\n");
        format=0;
    }
    if(j==101)
    {

        printf("few arguments for format 2\n");
        format=0;
    }
    if(j==102)
    {

        printf("many arguments for format 2\n");
        format=0;
    }
    if(j==103)
{

    printf("wrong argument for format 2\n");
    format=0;
}
if(j==104)
{

    printf("Less argument for format 3\n");
}
if(error==1)
{
 format =0;
}

    mem=mem+format;
    if(mem>65535)
    {

        printf("Memory insufficient\n");
        return 0;
    }
}
}

int  ccode(char a[])
{

    FILE *p;
    int i=1,j=0;
    char temp[10];

    p=fopen("opcode.txt","r");


    while(!feof(p))
    {


        fscanf(p,"%s",&temp);

        i=strcmp(temp,a);
        if(i==0)
        {
     focode(p);
        return 10;

        }

    }
    if(i!=0)
    {

        return 14;
    }


}
void focode(FILE *p)
{

    char temp[10];

    fscanf(p,"%s",&temp);
    format =atoi(temp);
    fscanf(p,"%s",&temp);
    opcode=atoi (temp);

}

void extract2(char a[],int l )
{
int j=l,k,abk,var1,i,var2=0,var3=0,var4=0,sstring=0,var5=0,var6=0;
char temp[10],b,c;
i=strlen(a);
while(j<=i&&i!=0)
{
    while(j<=i)
    {
        if(a[j]!=' ')
        {
            sstring++;
            k=j;
            while(j<=i)
            {

                if(j==i)
                    {

                        l=j+1;
                        j++;
                        break;
                    }
                if(a[j]==' ')
                {

                    l=j;

                    break;
                }
                else{
                    j++;
                }

            }
            j++;
            break;
        }
        else
        {
            j++;
        }
    }

    printf("\n");
    var1=0;
    for(;k<l;k++)
    {

        temp[var1]=a[k];
        var1++;
    }
    temp[var1]='\0';
    var1=strlen(temp);// la[5],label[10],code[10],n[1],i[1],x[1],plus[5],operand[10];
//int format=0,opcode=0,n=0,i=0,x=0,error=0;
    if(var1>=1&&var5==0)
    {
        printf("ooo");



            if(var1==1&&temp[0]!='n'&&temp[0]!='x'&&temp[0]!='i'&&temp[0]!='+')
        for(abk=1;abk<=i;abk++)
        {

            if(a[abk]!=' ')
            {

                error=1;
                printf("too many arguments\n");
                return;
            }
            else
            {


                strcpy(label,temp);
                return ;
                }
        }
        else if(var1>1)
        {
        for(abk=1;abk<=i;abk++)
        {

            if(a[abk]!=' ')
            {

                error=1;
                printf("too many arguments\n");
            return;
            }
            else
        {


        strcpy(label,temp);
        return ;}
        }
        }


    }
    else if(temp[0]=='n'&&var1==1)
    {
        printf("u");
        if(var2==0 &&var5==0)
        {


        if(in[0]==1)
        {
            error =1;
            printf("immediate addressing mode\n");
            return ;
        }
        else
        {


        n[0]=1;
        var2=1;
        }
        }
        else
        {

            error =1;

            if(var2==1)
                printf("could not use n twice\n");
            if(var5==1)
                printf("could not use n after + \n");
            return;

        }
    }
    else if(temp[0]=='i'&&var1==1)
    {
        printf("r");
        if(var3==0 && var5==0)
        {
            if(n[0]==1)
            {
                error=1;
                printf("direct addressing mode\n");
            }
            else
            {
                var3=1;
                in[0]=1;
            }
        }
        else
        {
            error =1;
            if(var2==1)
            printf("could not use i twice\n");
            if(var5==1)
            printf("could not use i after + \n");
            return;
        }
    }
    else if(temp[0]=='x' && var1==1)
    {
        printf("how");

        if(var6==0 && var5==0)
        {
            x[0]=1;
            var6=1;

        }
        else if(var6==1)
        {
            error=1;
            printf("could not use x twice\n");
            return;
        }
        if(var5==1)
        {
            error=1;
            printf("could not use x after +\n");
            return;
        }
    }
    else if(temp[0]=='+' &&var1==1)
    {
        printf("hello");
        if(var5==1)
        {
            printf("multiple use of + not allowed\n");
            error=1;
            return;
        }
        else
        {
            var5=1;
            printf("%d",var5);
        }

    }
    else if(var5==1)
    {

        var4=atoi(temp);
            if(var4==0)
            {
                printf("Enter number after +\n");
                error=1;
                return;
            }
        }


}
printf("%d %d %d %d %d %d",var1,var2,var3,var4,var5,var6);
}




















